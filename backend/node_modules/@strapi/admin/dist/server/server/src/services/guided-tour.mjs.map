{"version":3,"file":"guided-tour.mjs","sources":["../../../../../server/src/services/guided-tour.ts"],"sourcesContent":["import { Core, Internal } from '@strapi/types';\nimport constants from './constants';\n\nexport type GuidedTourRequiredActions = {\n  didCreateContentTypeSchema: boolean;\n  didCreateContent: boolean;\n  didCreateApiToken: boolean;\n};\nexport type GuidedTourCompletedActions = keyof GuidedTourRequiredActions;\n\nexport const createGuidedTourService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const getCompletedActions = async () => {\n    // Check if any content-type schemas have been create on the api:: namespace\n    const contentTypeSchemaNames = Object.keys(strapi.contentTypes).filter((contentTypeUid) =>\n      contentTypeUid.startsWith('api::')\n    );\n    const didCreateContentTypeSchema = contentTypeSchemaNames.length > 0;\n\n    // Check if any content has been created for content-types on the api:: namespace\n    const hasContent = await (async () => {\n      for (const name of contentTypeSchemaNames) {\n        const count = await strapi.documents(name as Internal.UID.ContentType).count({});\n\n        if (count > 0) return true;\n      }\n\n      return false;\n    })();\n    const didCreateContent = didCreateContentTypeSchema && hasContent;\n\n    // Check if any api tokens have been created besides the default ones\n    const createdApiTokens = await strapi\n      .documents('admin::api-token')\n      .findMany({ fields: ['name', 'description'] });\n    const didCreateApiToken = createdApiTokens.some((doc) =>\n      constants.DEFAULT_API_TOKENS.every(\n        (token) => token.name !== doc.name && token.description !== doc.description\n      )\n    );\n\n    // Compute an array of action names that have been completed\n    const requiredActions = {\n      didCreateContentTypeSchema,\n      didCreateContent,\n      didCreateApiToken,\n    };\n    const requiredActionNames = Object.keys(requiredActions) as Array<GuidedTourCompletedActions>;\n    const completedActions = requiredActionNames.filter((key) => requiredActions[key]);\n\n    return completedActions;\n  };\n\n  return {\n    getCompletedActions,\n  };\n};\n"],"names":["createGuidedTourService","strapi","getCompletedActions","contentTypeSchemaNames","Object","keys","contentTypes","filter","contentTypeUid","startsWith","didCreateContentTypeSchema","length","hasContent","name","count","documents","didCreateContent","createdApiTokens","findMany","fields","didCreateApiToken","some","doc","constants","DEFAULT_API_TOKENS","every","token","description","requiredActions","requiredActionNames","completedActions","key"],"mappings":";;AAUaA,MAAAA,uBAAAA,GAA0B,CAAC,EAAEC,MAAM,EAA2B,GAAA;AACzE,IAAA,MAAMC,mBAAsB,GAAA,UAAA;;AAE1B,QAAA,MAAMC,sBAAyBC,GAAAA,MAAAA,CAAOC,IAAI,CAACJ,MAAOK,CAAAA,YAAY,CAAEC,CAAAA,MAAM,CAAC,CAACC,cACtEA,GAAAA,cAAAA,CAAeC,UAAU,CAAC,OAAA,CAAA,CAAA;QAE5B,MAAMC,0BAAAA,GAA6BP,sBAAuBQ,CAAAA,MAAM,GAAG,CAAA;;QAGnE,MAAMC,UAAAA,GAAa,MAAO,CAAA,UAAA;YACxB,KAAK,MAAMC,QAAQV,sBAAwB,CAAA;gBACzC,MAAMW,KAAAA,GAAQ,MAAMb,MAAOc,CAAAA,SAAS,CAACF,IAAkCC,CAAAA,CAAAA,KAAK,CAAC,EAAC,CAAA;gBAE9E,IAAIA,KAAAA,GAAQ,GAAG,OAAO,IAAA;AACxB;YAEA,OAAO,KAAA;SACT,GAAA;AACA,QAAA,MAAME,mBAAmBN,0BAA8BE,IAAAA,UAAAA;;AAGvD,QAAA,MAAMK,mBAAmB,MAAMhB,MAAAA,CAC5Bc,SAAS,CAAC,kBAAA,CAAA,CACVG,QAAQ,CAAC;YAAEC,MAAQ,EAAA;AAAC,gBAAA,MAAA;AAAQ,gBAAA;AAAc;AAAC,SAAA,CAAA;QAC9C,MAAMC,iBAAAA,GAAoBH,iBAAiBI,IAAI,CAAC,CAACC,GAC/CC,GAAAA,SAAAA,CAAUC,kBAAkB,CAACC,KAAK,CAChC,CAACC,KAAUA,GAAAA,KAAAA,CAAMb,IAAI,KAAKS,GAAIT,CAAAA,IAAI,IAAIa,KAAMC,CAAAA,WAAW,KAAKL,GAAAA,CAAIK,WAAW,CAAA,CAAA;;AAK/E,QAAA,MAAMC,eAAkB,GAAA;AACtBlB,YAAAA,0BAAAA;AACAM,YAAAA,gBAAAA;AACAI,YAAAA;AACF,SAAA;QACA,MAAMS,mBAAAA,GAAsBzB,MAAOC,CAAAA,IAAI,CAACuB,eAAAA,CAAAA;QACxC,MAAME,gBAAAA,GAAmBD,oBAAoBtB,MAAM,CAAC,CAACwB,GAAQH,GAAAA,eAAe,CAACG,GAAI,CAAA,CAAA;QAEjF,OAAOD,gBAAAA;AACT,KAAA;IAEA,OAAO;AACL5B,QAAAA;AACF,KAAA;AACF;;;;"}