'use strict';

var constants = require('./constants.js');

const createGuidedTourService = ({ strapi })=>{
    const getCompletedActions = async ()=>{
        // Check if any content-type schemas have been create on the api:: namespace
        const contentTypeSchemaNames = Object.keys(strapi.contentTypes).filter((contentTypeUid)=>contentTypeUid.startsWith('api::'));
        const didCreateContentTypeSchema = contentTypeSchemaNames.length > 0;
        // Check if any content has been created for content-types on the api:: namespace
        const hasContent = await (async ()=>{
            for (const name of contentTypeSchemaNames){
                const count = await strapi.documents(name).count({});
                if (count > 0) return true;
            }
            return false;
        })();
        const didCreateContent = didCreateContentTypeSchema && hasContent;
        // Check if any api tokens have been created besides the default ones
        const createdApiTokens = await strapi.documents('admin::api-token').findMany({
            fields: [
                'name',
                'description'
            ]
        });
        const didCreateApiToken = createdApiTokens.some((doc)=>constants.DEFAULT_API_TOKENS.every((token)=>token.name !== doc.name && token.description !== doc.description));
        // Compute an array of action names that have been completed
        const requiredActions = {
            didCreateContentTypeSchema,
            didCreateContent,
            didCreateApiToken
        };
        const requiredActionNames = Object.keys(requiredActions);
        const completedActions = requiredActionNames.filter((key)=>requiredActions[key]);
        return completedActions;
    };
    return {
        getCompletedActions
    };
};

exports.createGuidedTourService = createGuidedTourService;
//# sourceMappingURL=guided-tour.js.map
